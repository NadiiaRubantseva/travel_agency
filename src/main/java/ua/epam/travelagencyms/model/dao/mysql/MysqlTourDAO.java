package ua.epam.travelagencyms.model.dao.mysql;

import ua.epam.travelagencyms.exceptions.DAOException;
import ua.epam.travelagencyms.model.dao.TourDAO;
import ua.epam.travelagencyms.model.entities.tour.Tour;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static ua.epam.travelagencyms.model.dao.mysql.constants.SQLFields.*;
import static ua.epam.travelagencyms.model.dao.mysql.constants.SQLFields.NUMBER_OF_RECORDS;
import static ua.epam.travelagencyms.model.dao.mysql.constants.TourSQLQueries.*;

/**
 * Tour DAO class for My SQL database. Matches table 'tour' in database.
 *
 * @author Nadiia Rubantseva
 * @version 1.0
 */
public class MysqlTourDAO implements TourDAO {

    /**
     * An instance of datasource to provide connection to database
     */
    private final DataSource dataSource;

    public MysqlTourDAO(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    /**
     * Inserts a new tour to database
     *
     * @param tour - id will be generated by database. Tour fields should be not null
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void add(Tour tour) throws DAOException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(ADD_TOUR)) {
            int k = 0;
            preparedStatement.setString(++k, tour.getTitle());
            preparedStatement.setInt(++k, tour.getPersons());
            preparedStatement.setDouble(++k, tour.getPrice());
            preparedStatement.setByte(++k, tour.getHot());
            preparedStatement.setInt(++k, tour.getTypeId());
            preparedStatement.setInt(++k, tour.getHotelId());
            preparedStatement.setString(++k, tour.getImage());
            preparedStatement.setString(++k, tour.getDescription());
            preparedStatement.execute();
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Obtains instance of User from database by id
     *
     * @param id - value of id field in database
     * @return Optional.ofNullable - tour is null if there is no tour
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public Optional<Tour> getById(long id) throws DAOException {
        Tour tour = null;
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_TOUR_BY_ID)) {
            int k = 0;
            preparedStatement.setLong(++k, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    tour = createTour(resultSet);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return Optional.ofNullable(tour);
    }

    /**
     * Obtains instance of Tour from database by title
     *
     * @param title - value of title field in database
     * @return Optional.ofNullable - tour is null if there is no tour
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public Optional<Tour> getByTitle(String title) throws DAOException {
        Tour tour = null;
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_TOUR_BY_TITLE)) {
            int k = 0;
            preparedStatement.setString(++k, title);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    tour = createTour(resultSet);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return Optional.ofNullable(tour);
    }

    /**
     * Obtains list of all tours from database
     *
     * @return tours list
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public List<Tour> getAll() throws DAOException {
        List<Tour> tours = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_TOURS)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    tours.add(createTour(resultSet));
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return tours;
    }

    /**
     * Updates tour
     *
     * @param tour instance
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void update(Tour tour) throws DAOException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_TOUR)) {
            int k = 0;
            preparedStatement.setString(++k, tour.getTitle());
            preparedStatement.setInt(++k, tour.getPersons());
            preparedStatement.setDouble(++k, tour.getPrice());
            preparedStatement.setByte(++k, tour.getHot());
            preparedStatement.setInt(++k, tour.getTypeId());
            preparedStatement.setInt(++k, tour.getHotelId());
            preparedStatement.setString(++k, tour.getImage());
            preparedStatement.setString(++k, tour.getDescription());
            preparedStatement.setLong(++k, tour.getId());
            preparedStatement.execute();
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Deletes tour record in database
     *
     * @param id - value of id field in database
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void delete(long id) throws DAOException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(DELETE_TOUR)) {
            int k = 0;
            preparedStatement.setLong(++k, id);
            preparedStatement.execute();
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Obtains sorted and limited list of tours from database
     *
     * @param query should contain filters (where), order (order field and type), limits for pagination
     * @return users list that matches demands. Will be empty if there are no users
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public List<Tour> getSorted(String query) throws DAOException {
        List<Tour> tours = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(String.format(GET_SORTED, query))) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    tours.add(createTour(resultSet));
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return tours;
    }

    /**
     * Obtains number of all records matching filter
     *
     * @param filter should contain 'where' to specify query
     * @return number of records
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public int getNumberOfRecords(String filter) throws DAOException {
        int numberOfRecords = 0;
        String query = String.format(GET_NUMBER_OF_RECORDS, filter);
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    numberOfRecords = resultSet.getInt(NUMBER_OF_RECORDS);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return numberOfRecords;
    }

    /**
     * Updates tour's image in database
     *
     * @param image  - tour's image, uploaded by user
     * @param tourId - tour id
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void updateImage(byte[] image, long tourId) throws DAOException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_IMAGE_CONTENT)) {
            int k = 0;
            preparedStatement.setBytes(++k, image);
            preparedStatement.setLong(++k, tourId);
            preparedStatement.execute();
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Retrieves image of tour from database
     *
     * @param id - value of id field in database
     * @return byte[], if no image - null
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public String getImage(long id) throws DAOException {
        String image = null;
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_IMAGE_BY_ID)) {
            int k = 0;
            preparedStatement.setLong(++k, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    image = resultSet.getString(IMAGE);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return image;
    }


    private Tour createTour(ResultSet resultSet) throws SQLException {
        return Tour.builder()
                .id(resultSet.getInt(ID))
                .title(resultSet.getString(TITLE))
                .persons(resultSet.getInt(PERSONS))
                .price(resultSet.getDouble(PRICE))
                .hot(resultSet.getByte(HOT))
                .typeId(resultSet.getInt(TYPE_ID))
                .hotelId(resultSet.getInt(HOTEL_ID))
                .image(resultSet.getString(IMAGE))
                .description(resultSet.getString(DESCRIPTION))
                .build();
    }


}
