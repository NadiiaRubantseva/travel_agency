package ua.epam.travelagencyms.model.services;

import ua.epam.travelagencyms.dto.UserDTO;
import ua.epam.travelagencyms.exceptions.ServiceException;

import java.util.List;

/**
 * UserService interface.
 * Implement all methods in concrete UserService
 *
 * @author Nadiia Rubantseva
 * @version 1.0
 */
public interface UserService extends Service<UserDTO> {

    /**
     * Calls DAO to add relevant entity
     * @param userDTO - DTO to be added as entity to database
     * @param password - password to be added to entity
     * @param confirmPassword - will check if passwords match
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void add(UserDTO userDTO, String password, String confirmPassword) throws ServiceException;

    /**
     * Obtains necessary User entity and checks if password matches
     * @param email - to find user in database
     * @param password - to check if matches with user password
     * @return UserDTO - that matches User entity
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    UserDTO signIn(String email, String password) throws ServiceException;

    /**
     * Obtains necessary User entity
     * @param email - to find user in database
     * @return UserDTO - that matches User entity
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    UserDTO getByEmail(String email) throws ServiceException;

    /**
     * Calls DAO to update User with new password
     * @param userId id to find user by
     * @param password - old password
     * @param newPass - new password
     * @param confirmPass - should match new password
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void changePassword(long userId, String password, String newPass, String confirmPass) throws ServiceException;

    /**
     * Calls DAO to update User with new password if user forget old one.
     * @param userId id to find user by
     * @return new password for user, generated by method
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    String changePassword(long userId) throws ServiceException;

    /**
     * Calls DAO to set new user role
     * @param userId - to find user by id
     * @param roleId new role for user
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void setRole(String userId, int roleId) throws ServiceException;

    /**
     * Calls DAO to get sorted, filtered and limited list of DTOs
     * @param query - to obtain necessary DTOs
     * @return List of UserDTOs that match demands
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    List<UserDTO> getSortedUsers(String query) throws ServiceException;

    /**
     * Calls DAO to get number of all records that match filter
     * @param filter - conditions for such Users
     * @return number of records that match demands
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    int getNumberOfRecords(String filter) throws ServiceException;

    /**
     * Calls DAO to check if user email is verified.
     * @param id - to find user by id
     * @return True if the email is verified, False otherwise.
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    boolean isEmailVerified(String id) throws ServiceException;

    /**
     * Calls DAO to set verification code.
     * @param id - to find user by id
     * @return verification code.
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    String setVerificationCode(long id) throws ServiceException;

    /**
     * Calls DAO to verify given code value with database.
     * @param id - to find user by id
     * @param code - the security code to be verified
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void verifySecurityCode (long id, String code) throws ServiceException;

    /**
     * Calls DAO to set new image for the user.
     * @param userId - to find user by id
     * @param avatar - image
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void setAvatar(String userId, byte[] avatar) throws ServiceException;

    /**
     * Calls DAO to check either user is blocked or not.
     * @param id - to find user by id
     * @return true - if yes, otherwise false.
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    boolean isBlocked(long id) throws ServiceException;

    /**
     * Calls DAO to set a new user status.
     * @param id - to find user by id
     * @param status - status value
     * @throws ServiceException - may wrap DAOException or be thrown by another mistakes
     */
    void setStatus(long id, String status) throws ServiceException;

    void setDiscount(int discount, long userId) throws ServiceException;
    int getDiscount(long userId) throws ServiceException;
}